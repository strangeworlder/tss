# CursorRules

This file defines rules and best practices for this project.

## Documentation Sources of Truth

The following documents serve as the official single source of truth for their respective domains:

1. **API Documentation**: `docs/api-documentation.md`
   - All API endpoints must conform to the patterns defined in this document
   - Frontend and backend implementations must align with the documented endpoints
   - Any changes to API behavior must be documented here first

2. **Authentication System**: `docs/authentication.md`
   - All authentication flows must follow the patterns defined in this document
   - Frontend must use the apiClient helpers for authenticated requests
   - Backend must implement token validation as documented
   - FormData uploads must use the authenticated apiClient methods

## Code Standards

1. **Frontend**:
   - Vue components follow atomic design principles
   - TypeScript with strict mode enabled
   - Use semantic variables from `front/src/assets/vars.css`
   - Tests required for all components

2. **Backend**:
   - Node.js with Express.js
   - TypeScript with strict mode enabled
   - Follow REST principles for API endpoints
   - Document all API changes in `docs/api-documentation.md`

3. **Authentication**:
   - Follow the patterns in `docs/authentication.md`
   - Always use apiClient for authenticated requests
   - Never use direct fetch for secured endpoints
   - Properly handle token expiration

## Development Workflow

1. Check relevant documentation first (`docs/api-documentation.md`, `docs/authentication.md`)
2. Update documentation if implementing new features or changing existing ones
3. Ensure implementations conform to the documented patterns
4. Update tests to cover new functionality
5. Run linters before committing changes

general:
  - shell:
      - "WSL2"
      - "fish shell, be vary of extra endline characters from Windows"
      - "Check correct node version by running `nvm use` in the terminal"
  - editor:
      - "latest version of Cursor"
      - "latest version of VS Code"
  - implementation_plan_tracking:
      - "ALWAYS mark checkboxes in implementation plans as completed right after completing them"
      - "Use the format [x] for completed items and [ ] for pending items"
      - "When completing a task, immediately update the corresponding checkbox in the implementation plan"
      - "If a task is partially complete, use [~] to indicate in-progress status"
      - "When adding new tasks to the plan, use [ ] to mark them as pending"
      - "Keep implementation plans up-to-date with the current status of all tasks"
      - "When reporting progress, reference the updated checkboxes in the implementation plan"
  - frontend:
      - "latest stable version of Vue"
      - "Typescript with strict mode enabled"
      - "API Consumption:"
          - "ALWAYS follow the API patterns documented in docs/api-documentation.md"
          - "API endpoints and data models MUST match those defined in the documentation"
          - "Use the standard error handling patterns defined in the documentation"
          - "When requesting changes to the API, update the documentation first"
      - "TypeScript configuration:"
          - "verbatimModuleSyntax is enabled in tsconfig.json"
          - "strict mode is enabled"
          - "isolatedModules is enabled"
          - "esModuleInterop is enabled"
      - "TypeScript best practices:"
          - "Always use type-only imports for interfaces and types: `import type { IMyInterface } from './file'`"
          - "Never mix type imports with value imports in the same import statement"
          - "Use explicit return types for functions and methods"
          - "Prefer interfaces over type aliases for object shapes"
          - "Annotate exported constants and functions with explicit types"
      - "File organization and imports:"
          - "When moving files between directories, ALWAYS update all import paths in other files that reference the moved file"
          - "Use a systematic approach to file moves:"
              - "1. Identify all files that import the file being moved"
              - "2. Update import paths in those files before or immediately after the move"
              - "3. Verify that all imports use the correct path after the move"
              - "4. Run the application to check for import errors"
          - "Use absolute imports with @/ prefix for project files"
          - "Use relative imports for files in the same directory or for closely related files"
          - "When in doubt, search the entire codebase for references to the file being moved"
      - "Testing requirements:"
          - "Testing framework: Jest for unit tests, Cypress for E2E tests"
          - "Test file organization:"
              - "Unit tests must be co-located with components in __tests__ directory"
              - "Test files must be named *.test.ts or *.test.tsx"
              - "E2E tests must be in cypress/e2e directory"
          - "Component testing requirements:"
              - "Every component MUST have unit tests"
              - "Tests must cover all props, events, and slots"
              - "Tests must verify accessibility features"
              - "Tests must include error states and edge cases"
              - "Tests must verify responsive behavior"
              - "100% coverage required for critical components"
          - "Test documentation:"
              - "Each test file must have a description of what is being tested"
              - "Test cases must have clear, descriptive names"
              - "Complex test setups must be documented"
          - "Testing best practices:"
              - "Use vi.mock for mocking dependencies"
              - "Mock external dependencies and API calls"
              - "Test user interactions and events"
              - "Verify component state changes"
              - "Test error handling and edge cases"
              - "Include accessibility testing"
          - "Testing structure:"
              - "Follow atomic design testing pattern for all components"
              - "Create separate test utility files (*.test-utils.ts)"
              - "Create fixture files for mock data in __fixtures__ directory"
              - "Organize tests by category (rendering, props, events, etc.)"
              - "Avoid script execution issues by creating files directly"
          - "Pinia store testing:"
              - "Use vi.mock to mock Pinia stores"
              - "Mock store state, getters, and actions"
              - "Test store mutations and state changes"
              - "Test store action error handling"
              - "Test store getter computations"
              - "Test store plugin functionality"
              - "Test store persistence (if used)"
              - "Example store mock:"
                  ```typescript
                  vi.mock('@/stores/myStore', () => ({
                    useMyStore: vi.fn(() => ({
                      state: {},
                      getters: {},
                      actions: vi.fn(),
                    })),
                  }));
                  ```
          - "DO NOT use vitest directly in test files - use the testing utilities provided by the project"
      - "Semantic variables are mandatory and must be maintained in front/src/assets/vars.css"
      - "All styling must use semantic variables - no hard-coded values allowed"
      - "Units must use rem as the base unit - avoid px completely"
      - "Semantic variable usage guidelines:"
          - "Always use semantic variables whenever possible"
          - "Never use base design tokens directly in components"
          - "When creating new semantic variables:"
              - "Must be generic enough to be used across multiple components"
              - "Must represent a meaningful design concept or purpose"
              - "Never create component-specific semantic variables"
              - "If a new semantic concept is identified, create a new semantic variable in vars.css"
      - "Color system consists of two layers:"
          - "Base design tokens (100-900 scale):"
              - "--color-primary-{variant}"
              - "--color-secondary-{variant}"
              - "--color-accent-{variant}"
              - "--color-neutral-{variant}"
          - "Semantic variables (meaning-based):"
              - "Background: --color-background, --color-background-alt, --color-background-muted"
              - "Text: --color-text, --color-text-secondary, --color-text-muted"
              - "Border: --color-border, --color-border-hover"
              - "Status: --color-danger, --color-warning, --color-success, --color-info"
      - "Spacing system:"
          - "Follow 8px grid system using rem units"
          - "Base spacing variables: --spacing-{size}"
          - "Sizes: xs (0.25rem), sm (0.5rem), md (1rem), lg (1.5rem), xl (2rem)"
          - "IMPORTANT: Only use these exact spacing variables:"
              - "--spacing-xs (0.25rem)"
              - "--spacing-sm (0.5rem)"
              - "--spacing-md (1rem)"
              - "--spacing-lg (1.5rem)"
              - "--spacing-xl (2rem)"
          - "NEVER use numeric spacing variables like --spacing-1, --spacing-2, --spacing-3, etc."
          - "NEVER use px units for spacing"
          - "NEVER create custom spacing variables"
      - "Typography system:"
          - "Font sizes in rem: --font-size-{size}"
          - "Weights: --font-weight-{weight}"
          - "Families: --font-family-{type}"
      - "Component Development:"
          - "follows atomic design principles (atoms, molecules, organisms, templates, pages)"
          - "Always search the codebase for existing components before creating new ones to prevent duplication"
          - "Components must be fully typed with TypeScript interfaces/types"
          - "Props must have proper validation and default values"
          - "Components must be documented with usage examples"
          - "Components must be responsive by default"
          - "Components must be accessible (WCAG 2.1 AA compliant)"
      - "Documentation:"
          - "All component documentation MUST be placed inside the component file (.vue) as an HTML comment at the top"
          - "DO NOT create separate .md files for component documentation"
          - "Component documentation must include:"
              - "Component name and brief description"
              - "Features list"
              - "Usage examples with code snippets"
              - "Props table with types, defaults, and descriptions"
              - "Accessibility considerations"
      - "Accessibility:"
          - "Use semantic HTML elements"
          - "Provide meaningful labels."
          - "Provide meaningful descriptions."
          - "Ensure keyboard navigation is available"
          - "Make sure the website is usable by screen readers"
          - "Use alt text for images"
          - "STRICT RULE: ARIA attributes are FORBIDDEN unless all of the following conditions are met:"
              - "1. Semantic HTML elements CANNOT provide the needed accessibility"
              - "2. The ARIA attribute serves a specific, necessary purpose that cannot be achieved with HTML alone"
              - "3. The attribute follows WAI-ARIA best practices and is being used correctly"
              - "4. Comprehensive testing with screen readers has proven the need for the attribute"
          - "NEVER use redundant ARIA attributes that duplicate native HTML semantics, such as:"
              - "role='button' on a <button> element"
              - "aria-disabled on elements with disabled attribute"
              - "role='link' on an <a> element"
              - "aria-label on elements with clear, visible text content"
              - "role='heading' on an <h1>-<h6> element"
          - "Semantic HTML and base HTML elements must be used to avoid aria attributes"
          - "When in doubt, DO NOT use ARIA attributes - use semantic HTML instead"
      - "Performance:"
          - "Lazy load components when possible"
          - "Optimize images and assets"
          - "Use proper caching strategies"
          - "Monitor bundle size"
      - "Code Quality:"
          - "Biome for linting and formatting"
          - "Use npm run lint:biome to maintain code quality"
          - "Follow the rules defined in biome.json"
          - "Biome configuration:"
              - "organizeImports.enabled: true"
              - "linter.rules.recommended: true"
              - "linter.rules.suspicious.noExplicitAny: off"
              - "linter.rules.suspicious.noImplicitAnyLet: off"
              - "linter.rules.complexity.useOptionalChain: error"
              - "linter.rules.style.noUnusedTemplateLiteral: error"
              - "formatter.indentStyle: space"
              - "formatter.indentWidth: 2"
              - "formatter.lineWidth: 100"
              - "javascript.formatter.quoteStyle: single"
              - "javascript.formatter.trailingCommas: es5"
              - "javascript.formatter.semicolons: always"
  - naming_conventions:
      - "BEM syntax for CSS classes (block__element--modifier)"
      - "kebab-case within BEM segments (my-block__my-element--my-modifier)"
      - "never use inline styles"
      - "never use tailwind css classes"
      - "PascalCase for Vue components"
      - "camelCase for variables and functions"
      - "camelCase for Vue methods"
      - "UPPERCASE for constants"
      - "Type interfaces must be prefixed with 'I' (IUser)"
      - "Enums must be suffixed with 'Enum' (StatusEnum)"

backend:
  - framework: "Node.js with Express.js for API development"
  - language: "Typescript with strict mode enabled"
  - api:
      - "API documentation is maintained in docs/api-documentation.md"
      - "The API documentation file is the SINGLE SOURCE OF TRUTH for all API implementations"
      - "When implementing or modifying APIs, ALWAYS refer to the docs/api-documentation.md file first"
      - "Any changes to API endpoints, request/response formats, or behavior MUST be documented in docs/api-documentation.md"
      - "Frontend and backend MUST follow the patterns and endpoints defined in the API documentation"
      - "GraphQL for flexible data querying"
          - "Use DataLoader for N+1 query prevention"
          - "Implement proper error handling and custom error types"
          - "Use field-level permissions"
      - "RESTful principles for any non-GraphQL endpoints"
          - "Follow proper HTTP methods and status codes"
          - "Implement HATEOAS where applicable"
      - "JWT for authentication"
          - "Implement refresh token rotation"
          - "Use proper token expiration strategies"
      - "proper rate limiting for endpoints"
          - "Implement sliding window rate limiting"
          - "Configure per-route limits"
      - "WebSockets for real-time features (notifications, chat)"
          - "Implement heartbeat mechanism"
          - "Handle reconnection gracefully"
  - database:
      - "MongoDB as primary database for social content"
          - "Use proper indexing strategies"
          - "Implement data validation at schema level"
      - "PostgreSQL for relational data (user accounts, relationships)"
          - "Use transactions for data integrity"
          - "Implement proper constraints"
      - "Redis for caching and session management"
          - "Implement proper TTL strategies"
          - "Use appropriate data structures"
  - storage: 
      - "AWS S3 or similar for media storage"
      - "Implement proper file type validation"
      - "Use CDN for media delivery"
  - architecture: 
      - "domain-driven design principles"
      - "SOLID principles"
      - "Clean Architecture patterns"
  - documentation: 
      - "Swagger/OpenAPI with detailed schemas"
      - "JSDoc for all public methods"
      - "README files for each module"
  - testing:
      - "Testing framework: Jest for unit and integration tests"
      - "Test file organization:"
          - "Unit tests must be co-located with source files in __tests__ directory"
          - "Test files must be named *.test.ts"
          - "Integration tests must be in tests/integration directory"
          - "E2E tests must be in tests/e2e directory"
      - "Testing requirements:"
          - "Every service and controller MUST have unit tests"
          - "All API endpoints must have integration tests"
          - "Database operations must have integration tests"
          - "Authentication flows must have E2E tests"
          - "100% coverage required for critical paths"
          - "E2E tests required for main user flows"
      - "Test documentation:"
          - "Each test file must have a description of what is being tested"
          - "Test cases must have clear, descriptive names"
          - "Complex test setups must be documented"
      - "Testing best practices:"
          - "Use proper test isolation"
          - "Mock external services and dependencies"
          - "Use test databases for integration tests"
          - "Clean up test data after each test"
          - "Test error handling and edge cases"
          - "Include performance testing for critical paths"
  - code_quality: 
      - "Biome for linting and formatting"
      - "Husky for pre-commit hooks"
      - "SonarQube for code quality metrics"
      - "Run npm run lint:biome to maintain code quality"
      - "Follow the rules defined in biome.json"
      - "TypeScript configuration:"
          - "target: ES2022"
          - "module: NodeNext"
          - "moduleResolution: NodeNext"
          - "esModuleInterop: true"
          - "strict: true"
          - "strictPropertyInitialization: false"
          - "skipLibCheck: true"
          - "emitDecoratorMetadata: true"
          - "experimentalDecorators: true"
          - "sourceMap: true"
          - "declaration: true"
          - "resolveJsonModule: true"

structure:
  - directories:
      - "front/: frontend folder - Vue application"
          - "src/components/: Vue components following atomic design"
          - "src/views/: Page components"
          - "src/store/: State management"
          - "src/services/: API services"
          - "src/utils/: Utility functions"
          - "src/types/: TypeScript types"
          - "src/assets/: Static assets and global styles"
      - "back/: backend folder - Node/Express application"
          - "src/controllers/: Request handlers"
          - "src/services/: Business logic"
          - "src/repositories/: Data access"
          - "src/middleware/: Custom middleware"
          - "src/models/: Database models"
          - "src/schemas/: GraphQL schemas"
          - "src/utils/: Utility functions"
          - "src/types/: TypeScript types"
  - backend_architecture:
      - "Organize code into modules by feature/domain"
      - "Use a layered architecture (controllers, services, repositories)"
      - "Implement proper dependency injection"
      - "Follow single responsibility principle"
  - configuration: 
      - "Keep in environment variables"
      - "Use proper configuration validation"
      - "Implement environment-specific configs"
  - database: 
      - "Maintain migrations for schema changes"
      - "Version control migrations"
      - "Implement rollback strategies"
  - security:
      - "Implement proper CORS policies"
      - "Use helmet for security headers"
      - "Implement rate limiting"
      - "Sanitize user inputs"
      - "Follow OWASP security guidelines"