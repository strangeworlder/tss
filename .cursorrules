general:
  - shell:
      - "WSL2"
      - "fish shell, be vary of extra endline characters from Windows"
      - "Check correct node version by running `nvm use` in the terminal"
  - editor:
      - "latest version of Cursor"
      - "latest version of VS Code"
  - frontend:
      - "latest stable version of Vue"
      - "Typescript with strict mode enabled"
      - "TypeScript configuration:"
          - "verbatimModuleSyntax is enabled in tsconfig.json"
          - "strict mode is enabled"
          - "isolatedModules is enabled"
          - "esModuleInterop is enabled"
      - "TypeScript best practices:"
          - "Always use type-only imports for interfaces and types: `import type { IMyInterface } from './file'`"
          - "Never mix type imports with value imports in the same import statement"
          - "Use explicit return types for functions and methods"
          - "Prefer interfaces over type aliases for object shapes"
          - "Annotate exported constants and functions with explicit types"
      - "File organization and imports:"
          - "When moving files between directories, ALWAYS update all import paths in other files that reference the moved file"
          - "Use a systematic approach to file moves:"
              - "1. Identify all files that import the file being moved"
              - "2. Update import paths in those files before or immediately after the move"
              - "3. Verify that all imports use the correct path after the move"
              - "4. Run the application to check for import errors"
          - "Use absolute imports with @/ prefix for project files"
          - "Use relative imports for files in the same directory or for closely related files"
          - "When in doubt, search the entire codebase for references to the file being moved"
      - "Testing requirements:"
          - "Testing framework: Vitest for unit tests, Cypress for E2E tests"
          - "Test file organization:"
              - "Unit tests must be co-located with components in __tests__ directory"
              - "Test files must be named *.test.ts or *.test.tsx"
              - "E2E tests must be in cypress/e2e directory"
          - "Component testing requirements:"
              - "Every component MUST have unit tests"
              - "Tests must cover all props, events, and slots"
              - "Tests must verify accessibility features"
              - "Tests must include error states and edge cases"
              - "Tests must verify responsive behavior"
              - "100% coverage required for critical components"
          - "Test documentation:"
              - "Each test file must have a description of what is being tested"
              - "Test cases must have clear, descriptive names"
              - "Complex test setups must be documented"
          - "Testing best practices:"
              - "Use component testing library for Vue components"
              - "Mock external dependencies and API calls"
              - "Test user interactions and events"
              - "Verify component state changes"
              - "Test error handling and edge cases"
              - "Include accessibility testing"
          - "Testing structure:"
              - "Follow atomic design testing pattern for all components"
              - "Create separate test utility files (*.test-utils.ts)"
              - "Create fixture files for mock data in __fixtures__ directory"
              - "Organize tests by category (rendering, props, events, etc.)"
              - "Avoid script execution issues by creating files directly"
      - "Semantic variables are mandatory and must be maintained in front/src/assets/vars.css"
      - "All styling must use semantic variables - no hard-coded values allowed"
      - "Units must use rem as the base unit - avoid px completely"
      - "Semantic variable usage guidelines:"
          - "Always use semantic variables whenever possible"
          - "Never use base design tokens directly in components"
          - "When creating new semantic variables:"
              - "Must be generic enough to be used across multiple components"
              - "Must represent a meaningful design concept or purpose"
              - "Never create component-specific semantic variables"
              - "If a new semantic concept is identified, create a new semantic variable in vars.css"
      - "Color system consists of two layers:"
          - "Base design tokens (100-900 scale):"
              - "--color-primary-{variant}"
              - "--color-secondary-{variant}"
              - "--color-accent-{variant}"
              - "--color-neutral-{variant}"
          - "Semantic variables (meaning-based):"
              - "Background: --color-background, --color-background-alt, --color-background-muted"
              - "Text: --color-text, --color-text-secondary, --color-text-muted"
              - "Border: --color-border, --color-border-hover"
              - "Status: --color-danger, --color-warning, --color-success, --color-info"
      - "Spacing system:"
          - "Follow 8px grid system using rem units"
          - "Base spacing variables: --spacing-{size}"
          - "Sizes: xs (0.25rem), sm (0.5rem), md (1rem), lg (1.5rem), xl (2rem)"
          - "IMPORTANT: Only use these exact spacing variables:"
              - "--spacing-xs (0.25rem)"
              - "--spacing-sm (0.5rem)"
              - "--spacing-md (1rem)"
              - "--spacing-lg (1.5rem)"
              - "--spacing-xl (2rem)"
          - "NEVER use numeric spacing variables like --spacing-1, --spacing-2, --spacing-3, etc."
          - "NEVER use px units for spacing"
          - "NEVER create custom spacing variables"
      - "Typography system:"
          - "Font sizes in rem: --font-size-{size}"
          - "Weights: --font-weight-{weight}"
          - "Families: --font-family-{type}"
      - "Component Development:"
          - "follows atomic design principles (atoms, molecules, organisms, templates, pages)"
          - "Always search the codebase for existing components before creating new ones to prevent duplication"
          - "Components must be fully typed with TypeScript interfaces/types"
          - "Props must have proper validation and default values"
          - "Components must be documented with usage examples"
          - "Components must be responsive by default"
          - "Components must be accessible (WCAG 2.1 AA compliant)"
      - "Documentation:"
          - "All component documentation MUST be placed inside the component file (.vue) as an HTML comment at the top"
          - "DO NOT create separate .md files for component documentation"
          - "Component documentation must include:"
              - "Component name and brief description"
              - "Features list"
              - "Usage examples with code snippets"
              - "Props table with types, defaults, and descriptions"
              - "Accessibility considerations"
      - "Accessibility:"
          - "Use semantic HTML elements"
          - "Provide meaningful labels."
          - "Provide meaningful descriptions."
          - "Ensure keyboard navigation is available"
          - "Make sure the website is usable by screen readers"
          - "Use alt text for images"
          - "STRICT RULE: ARIA attributes are FORBIDDEN unless all of the following conditions are met:"
              - "1. Semantic HTML elements CANNOT provide the needed accessibility"
              - "2. The ARIA attribute serves a specific, necessary purpose that cannot be achieved with HTML alone"
              - "3. The attribute follows WAI-ARIA best practices and is being used correctly"
              - "4. Comprehensive testing with screen readers has proven the need for the attribute"
          - "NEVER use redundant ARIA attributes that duplicate native HTML semantics, such as:"
              - "role='button' on a <button> element"
              - "aria-disabled on elements with disabled attribute"
              - "role='link' on an <a> element"
              - "aria-label on elements with clear, visible text content"
              - "role='heading' on an <h1>-<h6> element"
          - "Semantic HTML and base HTML elements must be used to avoid aria attributes"
          - "When in doubt, DO NOT use ARIA attributes - use semantic HTML instead"
      - "Performance:"
          - "Lazy load components when possible"
          - "Optimize images and assets"
          - "Use proper caching strategies"
          - "Monitor bundle size"
  - naming_conventions:
      - "BEM syntax for CSS classes (block__element--modifier)"
      - "kebab-case within BEM segments (my-block__my-element--my-modifier)"
      - "never use inline styles"
      - "never use tailwind css classes"
      - "PascalCase for Vue components"
      - "camelCase for variables and functions"
      - "camelCase for Vue methods"
      - "UPPERCASE for constants"
      - "Type interfaces must be prefixed with 'I' (IUser)"
      - "Enums must be suffixed with 'Enum' (StatusEnum)"

backend:
  - framework: "Node.js with Express.js for API development"
  - language: "Typescript with strict mode enabled"
  - api:
      - "GraphQL for flexible data querying"
          - "Use DataLoader for N+1 query prevention"
          - "Implement proper error handling and custom error types"
          - "Use field-level permissions"
      - "RESTful principles for any non-GraphQL endpoints"
          - "Follow proper HTTP methods and status codes"
          - "Implement HATEOAS where applicable"
      - "JWT for authentication"
          - "Implement refresh token rotation"
          - "Use proper token expiration strategies"
      - "proper rate limiting for endpoints"
          - "Implement sliding window rate limiting"
          - "Configure per-route limits"
      - "WebSockets for real-time features (notifications, chat)"
          - "Implement heartbeat mechanism"
          - "Handle reconnection gracefully"
  - database:
      - "MongoDB as primary database for social content"
          - "Use proper indexing strategies"
          - "Implement data validation at schema level"
      - "PostgreSQL for relational data (user accounts, relationships)"
          - "Use transactions for data integrity"
          - "Implement proper constraints"
      - "Redis for caching and session management"
          - "Implement proper TTL strategies"
          - "Use appropriate data structures"
  - storage: 
      - "AWS S3 or similar for media storage"
      - "Implement proper file type validation"
      - "Use CDN for media delivery"
  - architecture: 
      - "domain-driven design principles"
      - "SOLID principles"
      - "Clean Architecture patterns"
  - documentation: 
      - "Swagger/OpenAPI with detailed schemas"
      - "JSDoc for all public methods"
      - "README files for each module"
  - testing:
      - "Testing framework: Jest for unit and integration tests"
      - "Test file organization:"
          - "Unit tests must be co-located with source files in __tests__ directory"
          - "Test files must be named *.test.ts"
          - "Integration tests must be in tests/integration directory"
          - "E2E tests must be in tests/e2e directory"
      - "Testing requirements:"
          - "Every service and controller MUST have unit tests"
          - "All API endpoints must have integration tests"
          - "Database operations must have integration tests"
          - "Authentication flows must have E2E tests"
          - "100% coverage required for critical paths"
          - "E2E tests required for main user flows"
      - "Test documentation:"
          - "Each test file must have a description of what is being tested"
          - "Test cases must have clear, descriptive names"
          - "Complex test setups must be documented"
      - "Testing best practices:"
          - "Use proper test isolation"
          - "Mock external services and dependencies"
          - "Use test databases for integration tests"
          - "Clean up test data after each test"
          - "Test error handling and edge cases"
          - "Include performance testing for critical paths"
  - code_quality: 
      - "ESLint and Prettier for code formatting"
      - "Husky for pre-commit hooks"
      - "SonarQube for code quality metrics"

structure:
  - directories:
      - "front/: frontend folder - Vue application"
          - "src/components/: Vue components following atomic design"
          - "src/views/: Page components"
          - "src/store/: State management"
          - "src/services/: API services"
          - "src/utils/: Utility functions"
          - "src/types/: TypeScript types"
          - "src/assets/: Static assets and global styles"
      - "back/: backend folder - Node/Express application"
          - "src/controllers/: Request handlers"
          - "src/services/: Business logic"
          - "src/repositories/: Data access"
          - "src/middleware/: Custom middleware"
          - "src/models/: Database models"
          - "src/schemas/: GraphQL schemas"
          - "src/utils/: Utility functions"
          - "src/types/: TypeScript types"
  - backend_architecture:
      - "Organize code into modules by feature/domain"
      - "Use a layered architecture (controllers, services, repositories)"
      - "Implement proper dependency injection"
      - "Follow single responsibility principle"
  - configuration: 
      - "Keep in environment variables"
      - "Use proper configuration validation"
      - "Implement environment-specific configs"
  - database: 
      - "Maintain migrations for schema changes"
      - "Version control migrations"
      - "Implement rollback strategies"
  - security:
      - "Implement proper CORS policies"
      - "Use helmet for security headers"
      - "Implement rate limiting"
      - "Sanitize user inputs"
      - "Follow OWASP security guidelines"