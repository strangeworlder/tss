general:
  - shell:
      - "WSL2"
      - "fish shell, be vary of extra endline characters from Windows"
      - "Check correct node version by running `nvm use` in the terminal"
  - editor:
      - "latest version of Cursor"
      - "latest version of VS Code"
  - frontend:
      - "latest stable version of Vue"
      - "Typescript with strict mode enabled"
      - "Semantic variables are mandatory and must be maintained in front/src/assets/vars.css"
      - "All styling must use semantic variables - no hard-coded values allowed"
      - "Units must use rem as the base unit - avoid px completely"
      - "Semantic variable usage guidelines:"
          - "Always use semantic variables whenever possible"
          - "Never use base design tokens directly in components"
          - "When creating new semantic variables:"
              - "Must be generic enough to be used across multiple components"
              - "Must represent a meaningful design concept or purpose"
              - "Never create component-specific semantic variables"
              - "If a new semantic concept is identified, create a new semantic variable in vars.css"
      - "Color system consists of two layers:"
          - "Base design tokens (100-900 scale):"
              - "--color-primary-{variant}"
              - "--color-secondary-{variant}"
              - "--color-accent-{variant}"
              - "--color-neutral-{variant}"
          - "Semantic variables (meaning-based):"
              - "Background: --color-background, --color-background-alt, --color-background-muted"
              - "Text: --color-text, --color-text-secondary, --color-text-muted"
              - "Border: --color-border, --color-border-hover"
              - "Status: --color-danger, --color-warning, --color-success, --color-info"
      - "Spacing system:"
          - "Follow 8px grid system using rem units"
          - "Base spacing variables: --spacing-{size}"
          - "Sizes: xs (0.25rem), sm (0.5rem), md (1rem), lg (1.5rem), xl (2rem)"
      - "Typography system:"
          - "Font sizes in rem: --font-size-{size}"
          - "Weights: --font-weight-{weight}"
          - "Families: --font-family-{type}"
      - "Component Development:"
          - "follows atomic design principles (atoms, molecules, organisms, templates, pages)"
          - "Always search the codebase for existing components before creating new ones to prevent duplication"
          - "Components must be fully typed with TypeScript interfaces/types"
          - "Props must have proper validation and default values"
          - "Components must be documented with usage examples"
          - "Components must be responsive by default"
          - "Components must be accessible (WCAG 2.1 AA compliant)"
      - "Accessibility:"
          - "Use semantic HTML elements"
          - "Provide meaningful labels."
          - "Provide meaningful descriptions."
          - "Ensure keyboard navigation is available"
          - "Make sure the website is usable by screen readers"
          - "Use alt text for images"
          - "Use aria attributes only when absolutely necessary"
          - "Semantic HTML and base HTML elements must be used to avoid aria attributes"
          - "If aria attributes are used, make sure they are meaningful and descriptive"
      - "Performance:"
          - "Lazy load components when possible"
          - "Optimize images and assets"
          - "Use proper caching strategies"
          - "Monitor bundle size"
  - naming_conventions:
      - "BEM syntax for CSS classes (block__element--modifier)"
      - "kebab-case within BEM segments (my-block__my-element--my-modifier)"
      - "never use inline styles"
      - "never use tailwind css classes"
      - "PascalCase for Vue components"
      - "camelCase for variables and functions"
      - "camelCase for Vue methods"
      - "UPPERCASE for constants"
      - "Type interfaces must be prefixed with 'I' (IUser)"
      - "Enums must be suffixed with 'Enum' (StatusEnum)"

backend:
  - framework: "Node.js with Express.js for API development"
  - language: "Typescript with strict mode enabled"
  - api:
      - "GraphQL for flexible data querying"
          - "Use DataLoader for N+1 query prevention"
          - "Implement proper error handling and custom error types"
          - "Use field-level permissions"
      - "RESTful principles for any non-GraphQL endpoints"
          - "Follow proper HTTP methods and status codes"
          - "Implement HATEOAS where applicable"
      - "JWT for authentication"
          - "Implement refresh token rotation"
          - "Use proper token expiration strategies"
      - "proper rate limiting for endpoints"
          - "Implement sliding window rate limiting"
          - "Configure per-route limits"
      - "WebSockets for real-time features (notifications, chat)"
          - "Implement heartbeat mechanism"
          - "Handle reconnection gracefully"
  - database:
      - "MongoDB as primary database for social content"
          - "Use proper indexing strategies"
          - "Implement data validation at schema level"
      - "PostgreSQL for relational data (user accounts, relationships)"
          - "Use transactions for data integrity"
          - "Implement proper constraints"
      - "Redis for caching and session management"
          - "Implement proper TTL strategies"
          - "Use appropriate data structures"
  - storage: 
      - "AWS S3 or similar for media storage"
      - "Implement proper file type validation"
      - "Use CDN for media delivery"
  - architecture: 
      - "domain-driven design principles"
      - "SOLID principles"
      - "Clean Architecture patterns"
  - documentation: 
      - "Swagger/OpenAPI with detailed schemas"
      - "JSDoc for all public methods"
      - "README files for each module"
  - testing:
      - "Jest for unit and integration tests"
      - "100% coverage for critical paths"
      - "E2E tests for main user flows"
  - code_quality: 
      - "ESLint and Prettier for code formatting"
      - "Husky for pre-commit hooks"
      - "SonarQube for code quality metrics"

structure:
  - directories:
      - "front/: frontend folder - Vue application"
          - "src/components/: Vue components following atomic design"
          - "src/views/: Page components"
          - "src/store/: State management"
          - "src/services/: API services"
          - "src/utils/: Utility functions"
          - "src/types/: TypeScript types"
          - "src/assets/: Static assets and global styles"
      - "back/: backend folder - Node/Express application"
          - "src/controllers/: Request handlers"
          - "src/services/: Business logic"
          - "src/repositories/: Data access"
          - "src/middleware/: Custom middleware"
          - "src/models/: Database models"
          - "src/schemas/: GraphQL schemas"
          - "src/utils/: Utility functions"
          - "src/types/: TypeScript types"
  - backend_architecture:
      - "Organize code into modules by feature/domain"
      - "Use a layered architecture (controllers, services, repositories)"
      - "Implement proper dependency injection"
      - "Follow single responsibility principle"
  - configuration: 
      - "Keep in environment variables"
      - "Use proper configuration validation"
      - "Implement environment-specific configs"
  - database: 
      - "Maintain migrations for schema changes"
      - "Version control migrations"
      - "Implement rollback strategies"
  - security:
      - "Implement proper CORS policies"
      - "Use helmet for security headers"
      - "Implement rate limiting"
      - "Sanitize user inputs"
      - "Follow OWASP security guidelines"