version: '3.8'

services:
  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: front/Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./front:/app/front
      - ./shared:/app/shared
      - /app/front/node_modules
      - /app/front/node_modules/@shared
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:4000/api
      - VITE_GRAPHQL_URL=http://localhost:4000/graphql
    depends_on:
      - backend
    restart: unless-stopped

  # Backend service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    volumes:
      - ./back:/app/back
      - ./shared:/app/shared
      - /app/back/node_modules
      - /app/shared/node_modules
    environment:
      - NODE_ENV=development
      - PORT=4000
      - MONGODB_URI=mongodb://mongodb:27017/tss
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=tss
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your_jwt_secret_key_here
      - JWT_EXPIRATION=1d
    depends_on:
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # MongoDB service
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  # PostgreSQL service
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=tss
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  # Redis service
  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped

volumes:
  mongo_data:
  postgres_data:
  redis_data: 