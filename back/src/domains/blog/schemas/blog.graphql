type BlogPost {
  id: ID!
  title: String!
  slug: String!
  content: String!
  excerpt: String!
  author: Author!
  heroImage: HeroImage
  heroImageUrl: String
  tags: [String!]!
  createdAt: String!
  updatedAt: String!
  publishedAt: String
  isPublished: Boolean!
  comments: [Comment!]!
  commentCount: Int!
}

type HeroImage {
  filename: String!
  altText: String!
}

type Author {
  name: String!
  avatar: String
}

type Comment {
  id: ID!
  title: String!
  content: String!
  author: Author!
  parentId: ID!
  parentType: String!
  createdAt: String!
  updatedAt: String!
  replies: [Comment!]!
  replyCount: Int!
}

input CreateCommentInput {
  title: String!
  content: String!
  parentId: ID!
  parentType: String!
}

input DeleteCommentInput {
  commentId: ID!
}

type CommentResponse {
  success: Boolean!
  message: String
  data: Comment
}

type DeleteCommentResponse {
  success: Boolean!
  message: String
}

extend type Query {
  getComments(parentId: ID!, parentType: String!): [Comment!]!
  getComment(id: ID!): Comment
}

extend type Mutation {
  createComment(input: CreateCommentInput!): CommentResponse!
  deleteComment(input: DeleteCommentInput!): DeleteCommentResponse!
}

# ... query types and other schema definitions 